{"/home/travis/build/npmtest/node-npmtest-msee/test.js":"/* istanbul instrument in package npmtest_msee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-msee/lib.npmtest_msee.js":"/* istanbul instrument in package npmtest_msee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_msee = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_msee = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-msee/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-msee && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_msee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_msee\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_msee.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_msee.rollup.js'] =\n            local.assetsDict['/assets.npmtest_msee.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_msee.__dirname + '/lib.npmtest_msee.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/msee.js":"var fs = require('fs');\nvar path = require('path');\nvar marked = require('marked');\nvar cardinal = require('cardinal');\nvar xtend = require('xtend');\nvar color = require('./color');\nvar table = require('text-table');\nvar addHeader = require('table-header').add;\nvar chalk = require('chalk');\nvar wcstring = require('wcstring');\nvar os = require('os');\nvar entities = require('entities');\n\nvar defaultOptions = {\n    collapseNewlines: true,\n    space: '',\n    hrStart: '',\n    hrChar: '-',\n    hrEnd: '',\n    headingStart: '\\n',\n    headingEnd: '\\n\\n',\n    headingIndentChar: '#',\n    headingIndent: function (token) {\n        return Array(token.depth + 1).join(this.headingIndentChar)\n    },\n    codeStart: '\\n',\n    codeEnd: '\\n\\n',\n    codePad: '    ',\n    codeTheme: os.platform() === 'win32' ? require('./syntaxColor_win') : require('./syntaxColor'),\n    blockquoteStart: '\\n',\n    blockquoteEnd: '\\n\\n',\n    blockquoteColor: 'blockquote',\n    blockquotePad: '  > ',\n    blockquotePadColor: 'syntax',\n    listStart: '\\n',\n    listEnd: '\\n',\n    listItemStart: '',\n    listItemEnd: '\\n',\n    listItemColor: 'ul',\n    listItemPad: {first: '  * ', regular: '    '},\n    listItemPadColor: 'syntax',\n    orderedListItemPadTemplate: '  x. ',\n    paragraphStart: '',\n    paragraphEnd: '\\n\\n',\n    width: process.stdout.columns || 80,\n    maxWidth: -1,\n    tableStart: '\\n',\n    tableSeparator: ' ',\n    tableEnd: '\\n\\n'\n};\n\nvar tokens;\nvar inline;\nvar token;\nvar blockDepth = 0;\nvar ordinal;\nvar orderedList = false;\n\nfunction processInline(src, options) {\n    var out = '';\n    var cap;\n\n    function outLink (title, href) {\n        if (title) {\n            out += '[' + color(title, 'strong') + '](' + color(href, 'link') + ')';\n        } else {\n            out += '(' + color(href, 'link') + ')';\n        }\n    }\n\n    while (src) {\n        // escape\n        if (cap = inline.rules.escape.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += cap[1];\n          continue;\n        }\n\n        // code\n        if (cap = inline.rules.code.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += color(cap[2], 'code');\n            continue;\n        }\n\n        // autolink\n        if (cap = inline.rules.autolink.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += color(cap[0], 'link');\n            continue;\n        }\n\n        // url (gfm)\n        if (cap = inline.rules.url.exec(src)) {\n            src = src.substring(cap[0].length);\n            outLink(null, cap[1]);\n          continue;\n        }\n\n        // tag\n        if (cap = inline.rules.tag.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += cap[0];\n            continue;\n        }\n\n        // link\n        if (cap = inline.rules.link.exec(src)) {\n            src = src.substring(cap[0].length);\n            outLink(cap[1], cap[2]);\n            continue;\n        }\n\n        // reflink, nolink\n        if ((cap = inline.rules.reflink.exec(src))\n                || (cap = inline.rules.nolink.exec(src))) {\n            src = src.substring(cap[0].length);\n            out += cap[0];\n            continue;\n        }\n\n        // strong\n        if (cap = inline.rules.strong.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += color(processInline(cap[2] || cap[1]), 'strong');\n            continue;\n        }\n\n        // em\n        if (cap = inline.rules.em.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += color(processInline(cap[2] || cap[1]), 'em');\n            continue;\n        }\n\n        // br\n        if (cap = inline.rules.br.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += '\\n';\n            continue;\n        }\n\n        // del (gfm)\n        if (cap = inline.rules.del.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += color(processInline(cap[1]), 'del');\n            continue;\n        }\n\n        // text\n        if (cap = inline.rules.text.exec(src)) {\n            src = src.substring(cap[0].length);\n            out += cap[0];\n            continue;\n        }\n\n        if (src) {\n          throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n        }\n    }\n\n    return out;\n}\n\nfunction processToken(options) {\n    var type = token.type;\n    var text = token.text;\n    var content;\n\n    function getOption(key) {\n        var value = options[key];\n        return typeof value === 'function' ? value(token) : value;\n    }\n\n    if (text && type != 'code') {\n        text = entities.decodeHTML(text);\n    }\n\n    switch (type) {\n        case 'space': {\n            return options.space;\n        }\n        case 'hr': {\n            var hrStr = new Array(options.width).join(options.hrChar) + '\\n';\n            return options.hrStart + color(hrStr, type) + options.hrEnd;\n        }\n        case 'heading': {\n            text = blockFormat(processInline(text), {\n                block_color: type,\n                pad: options.headingIndent(token) + ' ',\n                pad_color: 'syntax',\n                width: options.width\n            })\n\n            return options.headingStart + text + options.headingEnd;\n        }\n        case 'code': {\n            content = '';\n\n            if (token.lang === 'raw') {\n                return text + '\\n';\n            }\n\n            try {\n                content = cardinal.highlight(text, {\n                    theme: chalk.supportsColor\n                            ? options.codeTheme\n                            : require('cardinal/themes/empty')\n                });\n            }\n            catch (e) {\n                content = color(text, type);\n            }\n\n            content = content.replace(/^/gm, getOption('codePad'));\n\n            return options.codeStart + content + options.codeEnd;\n        }\n        case 'table': {\n            content = tableFormat(token, options);\n            return options.tableStart + content + options.tableEnd;\n        }\n        case 'blockquote_start': {\n            content = '';\n            blockDepth++;\n\n            while (next().type !== 'blockquote_end') {\n                content += processToken(options);\n            }\n            content = blockFormat(content, {\n                block_color: options.blockquoteColor,\n                pad: options.blockquotePad,\n                pad_color: options.blockquotePadColor,\n                width: options.width\n            });\n\n            blockDepth--;\n            return options.blockquoteStart + content + options.blockquoteEnd;\n        }\n        case 'list_start': {\n            content = '';\n            orderedList = token.ordered;\n            ordinal = 1;\n\n            while (next().type !== 'list_end') {\n                content += processToken(options);\n            }\n\n            return options.listStart + content + options.listEnd;\n        }\n        case 'loose_item_start':\n        case 'list_item_start': {\n            content = '';\n\n            while (next().type !== 'list_item_end') {\n                if (type === 'text') {\n                    content += text;\n                } else {\n                    content += processToken(options);\n                }\n            }\n\n            var pad = options.listItemPad;\n            if (orderedList) {\n                var first = options.orderedListItemPadTemplate.replace('x', String(ordinal));\n                var regular = ' '.repeat(first.length);\n                pad = { first: first, regular: regular };\n                ++ordinal;\n            }\n\n            content = blockFormat(\n                processInline(content),\n                {\n                    block_color: options.listItemColor,\n                    pad: pad,\n                    pad_color: options.listItemPadColor,\n                    width: options.width\n                }\n            );\n\n            return options.listItemStart + content + options.listItemEnd;\n        }\n        case 'paragraph': {\n            if (blockDepth > 0) {\n                return text;\n            }\n            text = blockFormat(\n                processInline(text),\n                {\n                    block_color: type,\n                    pad: options.paragraphPad,\n                    pad_color: options.paragraphPadColor,\n                    width: options.width\n                }\n            );\n            return options.paragraphStart + text + options.paragraphEnd;\n        }\n        default: {\n            if (text) {\n                return text;\n            }\n        }\n    }\n}\n\nfunction next() {\n    return token = tokens.shift();\n}\n\nfunction blockFormat(src, opts) {\n    opts = opts || {};\n\n    var retLines = [];\n\n    src = wcstring(src).wrap(opts.width, opts.pad, function (padStr) {\n        if (opts.pad_color) {\n            return color(padStr, opts.pad_color)\n        }\n        return padStr\n    });\n\n    return color(src, opts.block_color);\n}\n\nfunction tableFormat (token, options) {\n    var aligns = token.align.map(function (a) {\n        return (a===null) ? 'l' : a[0];\n    });\n    var rows = token.cells.map(function (row) {\n        return row.map(processInline);\n    });\n    var headers = token.header.map(function (s) {\n        return processInline('**'+s+'**');\n    });\n    addHeader(rows, headers, { stringLength: getStringWidth });\n    return table(rows, {\n        align: aligns,\n        stringLength: getStringWidth,\n        hsep: options.tableSeparator\n    });\n}\n\n/**\n * Returns the number of columns required to display the given string.\n */\nfunction getStringWidth(str) {\n  return wcstring(str).width();\n}\n\nexports.parse = function(text, options) {\n    tokens = marked.lexer(text);\n    inline = new marked.InlineLexer(tokens.links);\n    options = xtend(defaultOptions, options);\n\n    var outputArr = [];\n    var output;\n\n    if (options.maxWidth !== -1 && options.width > options.maxWidth) {\n        options.width = options.maxWidth\n    }\n\n    while (next()) {\n        outputArr.push(processToken(options));\n    }\n\n    if (options.collapseNewlines) {\n        output = outputArr.join('').replace(/\\n\\n\\n/g, '\\n\\n');\n    }\n\n    tokens = null;\n    token = null;\n\n    return output;\n}\n\nexports.parseFile = function(file, options) {\n    var filePath = path.resolve(__dirname, file);\n    var ret = '';\n\n    try {\n        var text = fs.readFileSync(filePath).toString();\n        ret = exports.parse(text, options);\n    }\n    catch (e) {\n        throw e;\n    }\n\n    return ret;\n}\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/color.js":"var chalk = require('chalk');\nvar os = require('os');\nvar lightColor = os.platform() === 'linux' ? chalk.white : chalk.grey;\n\n\nvar colorBrushes = {\n    \"syntax\": lightColor,\n    \"heading\": chalk.cyan.bold,\n    \"hr\": lightColor,\n    \"code\": lightColor,\n    \"blockquote\": chalk.blue,\n    \"bold\": chalk.bold,\n    \"link\": chalk.blue,\n    \"strong\": chalk.bold,\n    \"em\": chalk.italic,\n    \"del\": chalk.strikethrough,\n    \"ul\": null,\n    \"paragraph\": null\n}\n\nfunction color(text, type) {\n    var colorBrush = colorBrushes[type];\n    if (colorBrush === null)\n      return text;\n    if (!colorBrush)\n        colorBrush = chalk.stripColor;\n    return colorBrush(text);\n}\n\nmodule.exports = color;\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/syntaxColor.js":"var colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.red\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.magenta\n    , 'self'      :  colors.red\n    , 'console'   :  colors.blue\n    , 'log'       :  colors.blue\n    , 'warn'      :  colors.red\n    , 'error'     :  colors.red\n    , _default    :  undefined\n    }\n\n  , 'Null': {\n      _default: colors.magenta\n    }\n\n  , 'Numeric': {\n      _default: colors.blue\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':') \n          ? colors.blue(s)\n          : colors.green(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  colors.cyan\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  colors.cyan\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  colors.cyan\n    , 'for'         :  undefined\n    , 'function'    :  colors.magenta\n\n    , 'if'          :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  undefined\n    , 'let'         :  undefined\n    , 'new'         :  colors.magenta\n    , 'return'      :  colors.magenta\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  colors.blue\n    , 'throw'       :  undefined\n    , 'try'         :  colors.cyan\n    , 'typeof'      :  undefined\n\n    , 'var'         :  colors.green\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  undefined\n  }\n  , 'Punctuator': {\n      ';': undefined\n    , '.': undefined  \n    , ',': undefined  \n\n    , '{': undefined\n    , '}': undefined\n    , '(': undefined  \n    , ')': undefined  \n    , '[': undefined\n    , ']': undefined\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': undefined\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': undefined\n    , ':': undefined\n    , '=': colors.red\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n    \n    , '>>>=': undefined\n\n    , _default: colors.red\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.white\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.white\n    }\n\n  , _default: colors.green\n};\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/cli.js":"var nopt = require('nopt');\nvar path = require('path');\n\nexports.main = function(args, inpipe) {\n    var opts = nopt(\n        {\n            \"help\": Boolean\n        },\n        {\n            \"h\": [ \"--help\" ]\n        },\n        args,\n        0\n    );\n\n    var files = opts.argv.remain;\n    if (files.length === 0 && inpipe) {\n        return inpipe.pipe(require('./stream')())\n    }\n\n    var streamFile = require('./streamFile')\n\n    if (files.length === 0 || opts.help) {\n        files = [path.resolve(__dirname, '../Help.md')]\n    }\n\n    // We use combined-stream-wait-for-it because its the\n    // same library that is used by workshopper-adventure (a prominent user\n    // of msee) with this dependency we can ensure a shorter download\n    // time of workshoppers.\n    var combinedStream = require('combined-stream-wait-for-it').create()\n\n    files\n      .map(function (file) {\n        return path.resolve(process.cwd(), file)\n      })\n      .forEach(function (file) {\n        combinedStream.append(streamFile(file))\n      })\n\n    combinedStream.resume()\n\n    return combinedStream\n}\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/streamFile.js":"var stream = require('./stream.js')\nvar fs = require('fs')\nmodule.exports = function streamFile (file) {\n  return fs.createReadStream(file).pipe(stream())\n}\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/stream.js":"\nconst msee = require('./msee.js')\nconst through2 = require('through2')\n\nmodule.exports = function stream () {\n  var all = ''\n  return through2(function (chunk, enc, callback) {\n    all += chunk.toString()\n    callback()\n  }, function (callback) {\n    this.push(msee.parse(all))\n    callback()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-msee/node_modules/msee/lib/syntaxColor_win.js":"var colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.brightYellow\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.brightMagenta\n    , 'self'      :  colors.brightRed\n    , 'console'   :  undefined\n    , 'log'       :  colors.brightYellow\n    , 'warn'      :  colors.brightYellow\n    , 'error'     :  colors.brightYellow\n    , _default    :  undefined\n    }\n\n  , 'Null': {\n      _default: colors.brightMagenta\n    }\n\n  , 'Numeric': {\n      _default: colors.brightBlue\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':') \n          ? colors.brightBlue(s)\n          : colors.brightGreen(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  undefined\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  undefined\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  undefined\n    , 'for'         :  undefined\n    , 'function'    :  colors.brightMagenta\n\n    , 'if'          :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  colors.brightMagenta\n    , 'let'         :  undefined\n    , 'new'         :  colors.brightRed\n    , 'return'      :  colors.brigntMagenta\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  undefined\n    , 'throw'       :  undefined\n    , 'try'         :  undefined\n    , 'typeof'      :  undefined\n\n    , 'var'         :  colors.brightCyan\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  colors.brightCyan\n  }\n  , 'Punctuator': {\n      ';': undefined\n    , '.': undefined  \n    , ',': undefined \n\n    , '{': undefined\n    , '}': undefined\n    , '(': undefined  \n    , ')': undefined \n    , '[': undefined\n    , ']': undefined\n\n    , '<': colors.brightMagenta\n    , '>': colors.brightMagenta\n    , '+': colors.brightMagenta\n    , '-': colors.brightMagenta\n    , '*': colors.brightMagenta\n    , '%': colors.brightMagenta\n    , '&': colors.brightMagenta\n    , '|': colors.brightMagenta\n    , '^': colors.brightMagenta\n    , '!': colors.brightMagenta\n    , '~': colors.brightMagenta\n    , '?': colors.brightMagenta\n    , ':': undefined\n    , '=': colors.brightMagenta\n\n    , '<=': colors.brighYellow\n    , '>=': colors.brighYellow\n    , '==': colors.brighYellow\n    , '!=': colors.brighYellow\n    , '++': colors.brighYellow\n    , '--': colors.brighYellow\n    , '<<': colors.brighYellow\n    , '>>': colors.brighYellow\n    , '&&': colors.brighYellow\n    , '||': colors.brighYellow\n    , '+=': colors.brighYellow\n    , '-=': colors.brighYellow\n    , '*=': colors.brighYellow\n    , '%=': colors.brighYellow\n    , '&=': colors.brighYellow\n    , '|=': colors.brighYellow\n    , '^=': colors.brighYellow\n    , '/=': colors.brighYellow\n    , '=>': colors.brighYellow\n\n    , '===': colors.brightCyan\n    , '!==': colors.brightCyan\n    , '>>>': colors.brightCyan\n    , '<<=': colors.brightCyan\n    , '>>=': colors.brightCyan\n    , '...': colors.brightCyan\n    \n    , '>>>=': colors.cyan\n\n    , _default: undefined\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.white\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.white\n    }\n\n  , _default: undefined\n};\n"}